// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.26.1
// source: adgroup/v1/adgroup.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Adgroup_CreateAdgroup_FullMethodName = "/api.adgroup.v1.Adgroup/CreateAdgroup"
	Adgroup_UpdateAdgroup_FullMethodName = "/api.adgroup.v1.Adgroup/UpdateAdgroup"
	Adgroup_DeleteAdgroup_FullMethodName = "/api.adgroup.v1.Adgroup/DeleteAdgroup"
	Adgroup_GetAdgroup_FullMethodName    = "/api.adgroup.v1.Adgroup/GetAdgroup"
	Adgroup_ListAdgroup_FullMethodName   = "/api.adgroup.v1.Adgroup/ListAdgroup"
)

// AdgroupClient is the client API for Adgroup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdgroupClient interface {
	CreateAdgroup(ctx context.Context, in *CreateAdgroupRequest, opts ...grpc.CallOption) (*CreateAdgroupReply, error)
	UpdateAdgroup(ctx context.Context, in *UpdateAdgroupRequest, opts ...grpc.CallOption) (*UpdateAdgroupReply, error)
	DeleteAdgroup(ctx context.Context, in *DeleteAdgroupRequest, opts ...grpc.CallOption) (*DeleteAdgroupReply, error)
	GetAdgroup(ctx context.Context, in *GetAdgroupRequest, opts ...grpc.CallOption) (*GetAdgroupReply, error)
	ListAdgroup(ctx context.Context, in *ListAdgroupRequest, opts ...grpc.CallOption) (*ListAdgroupReply, error)
}

type adgroupClient struct {
	cc grpc.ClientConnInterface
}

func NewAdgroupClient(cc grpc.ClientConnInterface) AdgroupClient {
	return &adgroupClient{cc}
}

func (c *adgroupClient) CreateAdgroup(ctx context.Context, in *CreateAdgroupRequest, opts ...grpc.CallOption) (*CreateAdgroupReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAdgroupReply)
	err := c.cc.Invoke(ctx, Adgroup_CreateAdgroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adgroupClient) UpdateAdgroup(ctx context.Context, in *UpdateAdgroupRequest, opts ...grpc.CallOption) (*UpdateAdgroupReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAdgroupReply)
	err := c.cc.Invoke(ctx, Adgroup_UpdateAdgroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adgroupClient) DeleteAdgroup(ctx context.Context, in *DeleteAdgroupRequest, opts ...grpc.CallOption) (*DeleteAdgroupReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAdgroupReply)
	err := c.cc.Invoke(ctx, Adgroup_DeleteAdgroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adgroupClient) GetAdgroup(ctx context.Context, in *GetAdgroupRequest, opts ...grpc.CallOption) (*GetAdgroupReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAdgroupReply)
	err := c.cc.Invoke(ctx, Adgroup_GetAdgroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adgroupClient) ListAdgroup(ctx context.Context, in *ListAdgroupRequest, opts ...grpc.CallOption) (*ListAdgroupReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAdgroupReply)
	err := c.cc.Invoke(ctx, Adgroup_ListAdgroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdgroupServer is the server API for Adgroup service.
// All implementations must embed UnimplementedAdgroupServer
// for forward compatibility
type AdgroupServer interface {
	CreateAdgroup(context.Context, *CreateAdgroupRequest) (*CreateAdgroupReply, error)
	UpdateAdgroup(context.Context, *UpdateAdgroupRequest) (*UpdateAdgroupReply, error)
	DeleteAdgroup(context.Context, *DeleteAdgroupRequest) (*DeleteAdgroupReply, error)
	GetAdgroup(context.Context, *GetAdgroupRequest) (*GetAdgroupReply, error)
	ListAdgroup(context.Context, *ListAdgroupRequest) (*ListAdgroupReply, error)
	mustEmbedUnimplementedAdgroupServer()
}

// UnimplementedAdgroupServer must be embedded to have forward compatible implementations.
type UnimplementedAdgroupServer struct {
}

func (UnimplementedAdgroupServer) CreateAdgroup(context.Context, *CreateAdgroupRequest) (*CreateAdgroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdgroup not implemented")
}
func (UnimplementedAdgroupServer) UpdateAdgroup(context.Context, *UpdateAdgroupRequest) (*UpdateAdgroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdgroup not implemented")
}
func (UnimplementedAdgroupServer) DeleteAdgroup(context.Context, *DeleteAdgroupRequest) (*DeleteAdgroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdgroup not implemented")
}
func (UnimplementedAdgroupServer) GetAdgroup(context.Context, *GetAdgroupRequest) (*GetAdgroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdgroup not implemented")
}
func (UnimplementedAdgroupServer) ListAdgroup(context.Context, *ListAdgroupRequest) (*ListAdgroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAdgroup not implemented")
}
func (UnimplementedAdgroupServer) mustEmbedUnimplementedAdgroupServer() {}

// UnsafeAdgroupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdgroupServer will
// result in compilation errors.
type UnsafeAdgroupServer interface {
	mustEmbedUnimplementedAdgroupServer()
}

func RegisterAdgroupServer(s grpc.ServiceRegistrar, srv AdgroupServer) {
	s.RegisterService(&Adgroup_ServiceDesc, srv)
}

func _Adgroup_CreateAdgroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAdgroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdgroupServer).CreateAdgroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Adgroup_CreateAdgroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdgroupServer).CreateAdgroup(ctx, req.(*CreateAdgroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Adgroup_UpdateAdgroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdgroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdgroupServer).UpdateAdgroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Adgroup_UpdateAdgroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdgroupServer).UpdateAdgroup(ctx, req.(*UpdateAdgroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Adgroup_DeleteAdgroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAdgroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdgroupServer).DeleteAdgroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Adgroup_DeleteAdgroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdgroupServer).DeleteAdgroup(ctx, req.(*DeleteAdgroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Adgroup_GetAdgroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdgroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdgroupServer).GetAdgroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Adgroup_GetAdgroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdgroupServer).GetAdgroup(ctx, req.(*GetAdgroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Adgroup_ListAdgroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAdgroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdgroupServer).ListAdgroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Adgroup_ListAdgroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdgroupServer).ListAdgroup(ctx, req.(*ListAdgroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Adgroup_ServiceDesc is the grpc.ServiceDesc for Adgroup service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Adgroup_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.adgroup.v1.Adgroup",
	HandlerType: (*AdgroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAdgroup",
			Handler:    _Adgroup_CreateAdgroup_Handler,
		},
		{
			MethodName: "UpdateAdgroup",
			Handler:    _Adgroup_UpdateAdgroup_Handler,
		},
		{
			MethodName: "DeleteAdgroup",
			Handler:    _Adgroup_DeleteAdgroup_Handler,
		},
		{
			MethodName: "GetAdgroup",
			Handler:    _Adgroup_GetAdgroup_Handler,
		},
		{
			MethodName: "ListAdgroup",
			Handler:    _Adgroup_ListAdgroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "adgroup/v1/adgroup.proto",
}
